#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from sensor_msgs.msg import Range
from std_msgs.msg import Bool, String
import serial
import threading
import time
import re
import numpy as np

class UltrasonicListenerNode(Node):
    """
    Ultrasonic Listener Node for the autonomous golf cart
    
    Receives data from front Arduino ultrasonic sensors,
    implements sensor fusion, and handles emergency stops.
    """
    
    def _init_(self):
        super()._init_('ultrasonic_listener_node')
        
        # Declare parameters
        self.declare_parameter('serial_port', '/dev/ttyACM0')  # Front ultrasonic Arduino (Arduino R3)
        self.declare_parameter('baud_rate', 9600)
        self.declare_parameter('emergency_threshold', 30)  # cm
        self.declare_parameter('warning_threshold', 50)    # cm
        self.declare_parameter('sensor_fusion_window', 5)  # number of readings to average
        self.declare_parameter('emergency_hold_time', 5.0) # seconds
        self.declare_parameter('emergency_delay', 0.2)     # seconds delay before emergency stop
        
        # Get parameters
        self.serial_port = self.get_parameter('serial_port').value
        self.baud_rate = self.get_parameter('baud_rate').value
        self.emergency_threshold = self.get_parameter('emergency_threshold').value
        self.warning_threshold = self.get_parameter('warning_threshold').value
        self.sensor_fusion_window = self.get_parameter('sensor_fusion_window').value
        self.emergency_hold_time = self.get_parameter('emergency_hold_time').value
        self.emergency_delay = self.get_parameter('emergency_delay').value
        
        # Create publishers for ultrasonic sensor data
        self.front_left_pub = self.create_publisher(Range, '/ultrasonic/front/left', 10)
        self.front_center_pub = self.create_publisher(Range, '/ultrasonic/front/center', 10)
        self.front_right_pub = self.create_publisher(Range, '/ultrasonic/front/right', 10)
        
        # Create publisher for emergency status
        self.emergency_pub = self.create_publisher(Bool, '/emergency_status', 10)
        self.warning_pub = self.create_publisher(Bool, '/warning_status', 10)
        
        # Sensor fusion buffers
        self.front_distances = {
            'left': np.zeros(self.sensor_fusion_window),
            'center': np.zeros(self.sensor_fusion_window),
            'right': np.zeros(self.sensor_fusion_window)
        }
        self.buffer_index = 0
        
        # Emergency state
        self.emergency_active = False
        self.warning_active = False
        self.emergency_start_time = None
        self.pending_emergency = False
        self.emergency_trigger_time = None
        
        # Create serial connection
        try:
            self.serial = serial.Serial(
                port=self.serial_port,
                baudrate=self.baud_rate,
                timeout=1.0
            )
            self.get_logger().info(f"Connected to front Arduino on {self.serial_port}")
            
            # Start serial monitoring thread
            self.serial_thread = threading.Thread(target=self.monitor_serial)
            self.serial_thread.daemon = True
            self.serial_thread.start()
            
        except serial.SerialException as e:
            self.get_logger().error(f"Failed to connect to Arduino: {str(e)}")
            self.serial = None
            
        # Status timer
        self.status_timer = self.create_timer(0.1, self.publish_status)
        self.emergency_timer = self.create_timer(0.1, self.check_emergency_timeout)
        self.emergency_delay_timer = self.create_timer(0.1, self.check_emergency_delay)
        
        self.get_logger().info("Ultrasonic Listener Node initialized")
    
    def monitor_serial(self):
        """Monitor serial port for ultrasonic sensor data"""
        while rclpy.ok() and self.serial is not None:
            try:
                if self.serial.in_waiting > 0:
                    data = self.serial.readline().decode('utf-8').strip()
                    
                    # Check for emergency stop signal
                    if data == 's' or data == 'S':
                        self.trigger_emergency()
                        continue
                        
                    # Parse ultrasonic data
                    # Format: "FL:distance,FC:distance,FR:distance"
                    if data.startswith("FL:"):
                        self.parse_sensor_data(data)
                        
            except Exception as e:
                self.get_logger().error(f"Serial error: {str(e)}")
                time.sleep(1.0)
    
    def parse_sensor_data(self, data):
        """Parse ultrasonic sensor data and publish Range messages"""
        try:
            # Expected format: FL:120,FC:150,FR:130
            matches = re.match(r"FL:(\d+),FC:(\d+),FR:(\d+)", data)
            
            if matches and len(matches.groups()) == 3:
                fl_dist = int(matches.group(1))
                fc_dist = int(matches.group(2))
                fr_dist = int(matches.group(3))
                
                # Update sensor fusion buffers
                self.update_sensor_fusion({
                    'left': fl_dist,
                    'center': fc_dist,
                    'right': fr_dist
                })
                
                # Get fused distances
                fused_distances = self.get_fused_distances()
                
                # Create and publish Range messages
                fl_msg = self.create_range_message(fused_distances['left'], "front_left_ultrasonic")
                fc_msg = self.create_range_message(fused_distances['center'], "front_center_ultrasonic")
                fr_msg = self.create_range_message(fused_distances['right'], "front_right_ultrasonic")
                
                self.front_left_pub.publish(fl_msg)
                self.front_center_pub.publish(fc_msg)
                self.front_right_pub.publish(fr_msg)
                
                # Check for emergency conditions
                self.check_emergency_conditions(fused_distances)
                    
        except Exception as e:
            self.get_logger().warn(f"Error parsing data '{data}': {str(e)}")
    
    def update_sensor_fusion(self, distances):
        """Update sensor fusion buffers with new readings"""
        self.front_distances['left'][self.buffer_index] = distances['left']
        self.front_distances['center'][self.buffer_index] = distances['center']
        self.front_distances['right'][self.buffer_index] = distances['right']
        
        self.buffer_index = (self.buffer_index + 1) % self.sensor_fusion_window
    
    def get_fused_distances(self):
        """Get fused (averaged) distances from sensor buffers"""
        return {
            'left': np.mean(self.front_distances['left']),
            'center': np.mean(self.front_distances['center']),
            'right': np.mean(self.front_distances['right'])
        }
    
    def check_emergency_conditions(self, distances):
        """Check if emergency or warning conditions are met"""
        # Check for emergency conditions
        emergency_conditions = [
            distances['left'] < self.emergency_threshold,
            distances['center'] < self.emergency_threshold,
            distances['right'] < self.emergency_threshold
        ]
        
        # Check for warning conditions
        warning_conditions = [
            distances['left'] < self.warning_threshold,
            distances['center'] < self.warning_threshold,
            distances['right'] < self.warning_threshold
        ]
        
        # Update emergency state
        if any(emergency_conditions):
            if not self.emergency_active:
                    self.trigger_emergency()
        else:
            if self.emergency_active:
                self.release_emergency()
                    
        # Update warning state
        self.warning_active = any(warning_conditions)
    
    def create_range_message(self, distance_cm, frame_id):
        """Create a Range message from ultrasonic distance reading"""
        msg = Range()
        msg.header.stamp = self.get_clock().now().to_msg()
        msg.header.frame_id = frame_id
        msg.radiation_type = Range.ULTRASOUND
        msg.field_of_view = 0.26  # ~15 degrees in radians
        msg.min_range = 0.02      # 2cm
        msg.max_range = 4.0       # 400cm
        
        # Convert from cm to meters for ROS
        msg.range = float(distance_cm) / 100.0
        
        return msg
    
    def trigger_emergency(self):
        """Schedule emergency stop with delay"""
        if not self.pending_emergency:
            self.pending_emergency = True
            self.emergency_trigger_time = self.get_clock().now()
            self.get_logger().warn(f"Emergency stop scheduled with {self.emergency_delay}s delay")
    
    def release_emergency(self):
        """Release emergency stop"""
        self.emergency_active = False
        self.emergency_start_time = None
        self.get_logger().info("Emergency stop released")
        
        # Publish emergency clear status
        msg = Bool()
        msg.data = False
        self.emergency_pub.publish(msg)
    
    def check_emergency_timeout(self):
        """Check if emergency stop should be released based on timeout"""
        if self.emergency_active and self.emergency_start_time is not None:
            current_time = self.get_clock().now()
            time_diff = (current_time - self.emergency_start_time).nanoseconds / 1e9
            
            if time_diff >= self.emergency_hold_time:
                self.release_emergency()
    
    def check_emergency_delay(self):
        """Check if emergency stop delay has elapsed"""
        if self.pending_emergency and self.emergency_trigger_time is not None:
            elapsed = (self.get_clock().now() - self.emergency_trigger_time).nanoseconds / 1e9
            if elapsed >= self.emergency_delay:
                self.emergency_active = True
                self.emergency_start_time = self.get_clock().now()
                self.pending_emergency = False
                self.emergency_trigger_time = None
                self.get_logger().warn("EMERGENCY STOP TRIGGERED!")
                
                # Publish emergency status
                msg = Bool()
                msg.data = True
                self.emergency_pub.publish(msg)
    
    def publish_status(self):
        """Publish current status"""
        # Publish emergency status
        emergency_msg = Bool()
        emergency_msg.data = self.emergency_active
        self.emergency_pub.publish(emergency_msg)
        
        # Publish warning status
        warning_msg = Bool()
        warning_msg.data = self.warning_active
        self.warning_pub.publish(warning_msg)
    
    def cleanup(self):
        """Clean up resources"""
        if self.serial is not None:
            self.serial.close()
            self.get_logger().info("Serial port closed")

def main(args=None):
    rclpy.init(args=args)
    node = UltrasonicListenerNode()
    
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        node.cleanup()
        node.destroy_node()
        rclpy.shutdown()

if _name_ == '_main_':
    main()