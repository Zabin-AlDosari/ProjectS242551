#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from std_msgs.msg import Bool, Float32
from sensor_msgs.msg import Range
import serial
import time

class MotorControlNode(Node):
    """
    Motor Control Node for the autonomous golf cart
    
    Controls the motors based on ultrasonic sensor data and emergency status.
    Implements safety features and motor speed control.
    """
    
    def _init_(self):
        super()._init_('motor_control_node')
        
        # Declare parameters
        self.declare_parameter('serial_port', '/dev/ttyACM2')  # Motor control Arduino
        self.declare_parameter('baud_rate', 9600)
        self.declare_parameter('drive_speed', 80)    # Default drive speed (0-255)
        self.declare_parameter('steer_speed', 120)   # Default steering speed (0-255)
        
        # Get parameters
        self.serial_port = self.get_parameter('serial_port').value
        self.baud_rate = self.get_parameter('baud_rate').value
        self.drive_speed = self.get_parameter('drive_speed').value
        self.steer_speed = self.get_parameter('steer_speed').value
        
        # Motor state
        self.current_command = "S"
        self.emergency_active = False
        self.is_moving = False
        self.is_steering = False
        
        # Create subscribers
        self.emergency_sub = self.create_subscription(
            Bool,
            '/emergency_status',
            self.emergency_callback,
            10)
        self.speed_sub = self.create_subscription(
            Float32,
            '/target_speed',
            self.speed_callback,
            10)
        self.steer_sub = self.create_subscription(
            Float32,
            '/target_steer',
            self.steer_callback,
            10)
        
        # Create serial connection
        try:
            self.serial = serial.Serial(
                port=self.serial_port,
                baudrate=self.baud_rate,
                timeout=1.0
            )
            self.get_logger().info(f"Connected to motor control Arduino on {self.serial_port}")
            # Wait for Arduino to initialize
            time.sleep(2)
        except serial.SerialException as e:
            self.get_logger().error(f"Failed to connect to Arduino: {str(e)}")
            self.serial = None
        
        # Create control timer
        self.control_timer = self.create_timer(0.1, self.control_loop)
        
        self.get_logger().info("Motor Control Node initialized")
    
    def emergency_callback(self, msg):
        """Handle emergency status updates"""
        self.emergency_active = msg.data
        if self.emergency_active:
            self.send_command("S")
            self.get_logger().warn("Emergency stop - motors disabled")
    
    def speed_callback(self, msg):
        """Handle target speed updates"""
        if not self.emergency_active:
            # Convert speed (0-1) to command
            speed = msg.data
            if speed > 0.1:  # Forward
                self.is_moving = True
                if self.is_steering:
                    self.send_command("FL" if self.current_steer < 0 else "FR")
                else:
                    self.send_command("F")
            elif speed < -0.1:  # Backward
                self.is_moving = True
                if self.is_steering:
                    self.send_command("BL" if self.current_steer < 0 else "BR")
                else:
                    self.send_command("B")
            else:  # Stop
                self.is_moving = False
                if not self.is_steering:
                    self.send_command("S")
    
    def steer_callback(self, msg):
        """Handle steering updates"""
        if not self.emergency_active:
            steer = msg.data
            if abs(steer) > 0.1:  # Significant steering input
                self.is_steering = True
                self.current_steer = steer
                if self.is_moving:
                    if steer < 0:  # Left
                        self.send_command("FL" if self.current_speed > 0 else "BL")
                    else:  # Right
                        self.send_command("FR" if self.current_speed > 0 else "BR")
                else:
                    self.send_command("L" if steer < 0 else "R")
            else:  # No steering
                self.is_steering = False
                if self.is_moving:
                    self.send_command("F" if self.current_speed > 0 else "B")
                else:
                    self.send_command("S")
    
    def send_command(self, command):
        """Send command to Arduino"""
        if self.serial is not None and command != self.current_command:
            try:
                self.serial.write(f"{command}\n".encode())
                self.current_command = command
                self.get_logger().info(f"Sent command: {command}")
                
                # Read response
                response = self.serial.readline().decode().strip()
                if response:
                    self.get_logger().info(f"Arduino response: {response}")
            except serial.SerialException as e:
                self.get_logger().error(f"Failed to send command: {str(e)}")
    
    def control_loop(self):
        """Main control loop"""
        if self.emergency_active:
            self.send_command("S")
    
    def cleanup(self):
        """Clean up resources"""
        if self.serial is not None:
            # Send stop command before closing
            self.send_command("S")
            time.sleep(0.1)  # Give time for command to be sent
            self.serial.close()
            self.get_logger().info("Serial port closed")

def main(args=None):
    rclpy.init(args=args)
    node = MotorControlNode()
    
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        node.cleanup()
        node.destroy_node()
        rclpy.shutdown()

if _name_ == '_main_':
    main()